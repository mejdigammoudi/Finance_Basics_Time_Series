# Python function# to calculate the average stock price# the day with the highest stock price#  to determine if the stock prices are generally increasing, decreasing, or remaining stable.dates = ["4th January", "5th January", "6th January"]stock_prices = [155, 156, 153]def calculate_average(prices):    return sum(prices) / len(prices)def max_price (dates,prices):    maxi = prices.index(max(prices))    return dates[maxi]def move (prices):    first = prices[0]    last = prices[-1]    if last > first:        return "increasing"    elif last < first:        return "decreasing"    else:        return "stable"average_price = calculate_average(stock_prices)print(f"Average Stock Price: ${average_price}")print(max_price(dates,stock_prices))print(move(stock_prices))# Python function# to calculate the volatility (standard deviation) of these stock prices# to calculate the average stock price and highlight days when the stock price is above the average# to forecast the next day’s stock price based on the average increase or decrease of the previous days.dates = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]stock_prices = [150, 152, 151, 153, 152]import statisticsdef calculate_volatility(prices):    return statistics.stdev(prices)def above_average (dates,prices) :    avg_price = sum(prices) / len(prices)    for date, price in zip(dates,prices): #to pair elements of the two lists        if price > avg_price:            print(f"{date} : ${price} (Above Average)")        else:            print(f"{date} : ${price}")def forecast(dates,prices):    price_changes = [prices[i] - prices[i - 1] for i in range(1, len(prices))]    average_change = sum(price_changes) / len(price_changes)    next_day_forecast = prices[-1] + average_change    return next_day_forecastvolatility = calculate_volatility(stock_prices)print(f"Volatility: ${volatility}")above_average(dates,stock_prices)forecast(dates,stock_prices)# future value of $120, an interest rate of 5%, and a period of 2 years, calculate the present valuedef present_value(fv, r, n):    return fv / (1 + r)**nFV = 120r = 0.05n = 2PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")# you’re expecting $500 two years from now. If the discount rate is 6%, what is this amount worth today?def present_value(fv, r, n):    return fv / (1 + r)**nFV = 500r = 0.06n = 2PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")# a sum of $1000 due 5 years from now be worth today if the interest rate is 4%?def present_value(fv, r, n):    return fv / (1 + r)**nFV = 1000r = 0.04n = 5PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")#  invest $90 today at an interest rate of 7% for a period of 1 year, how much will you have at the end of the year?def future_value(pv, r, n):    return pv * (1 + r)**nPV = 90r = 0.07n = 1FV = future_value(PV, r, n)print(f"The future value is: ${FV:.2f}")# you place $200 in a savings account that offers a 3% interest rate compounded annually,# how much will you have in the account after 2 years?def future_value(pv, r, n):    return pv * (1 + r)**nPV = 200r = 0.03n = 2FV = future_value(PV, r, n)print(f"The future value is: ${FV:.2f}")# an initial investment of $150 and an annual interest rate of 5%,# how much will the investment be worth after 3 years ?def future_value(pv, r, n):    return pv * (1 + r)**nPV = 150r = 0.05n = 3FV = future_value(PV, r, n)print(f"The future value is: ${FV:.2f}")# you put $80 in a bank that offers a 9% annual interest rate# how much will you have after compounding for one year?def compound(pv, r):    return pv * (1 + r)PV = 80r = 0.09FV = compound(PV, r)print(f"After one year with a 9% interest rate, you’ll have: ${FV:.2f}")# the present value of $115 that you are to receive one year from now, given an interest rate of 8%.def present_value(fv, r, n):    return fv / (1 + r)**nFV = 115r = 0.08n = 1PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")#How much do you need to invest today to ensure you have $500 after two years if the annual interest rate is 6%?def present_value(fv, r, n):    return fv / (1 + r)**nFV = 500r = 0.06n = 2PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")# If you are promised $180 two years from now and the discount rate is 10%,what is the value of that promise today?def present_value(fv, r, n):    return fv / (1 + r)**nFV = 180r = 0.10n = 2PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")# Suppose you can invest money at 7% per annum.# How much do you need to invest now to ensure that you will have $1000 three years from now?def present_value(fv, r, n):    return fv / (1 + r)**nFV = 1000r = 0.07n = 3PV = present_value(FV, r, n)print(f"The present value is: ${PV:.2f}")# Fetch historical stock price data :# the daily stock data of Microsoft (ticker: ”MSFT”) for the year 2021# the historical stock price data of Google (ticker: ”GOOGL”) from January 1, 2020, to December 31, 2022# the stock data of Amazon (ticker: ”AMZN”) for the last quarter of 2021?import yfinance as yfimport matplotlib.pyplot as pltmsft_data = yf.download("MSFT", start="2021-01-01", end="2022-01-01")print(msft_data.head())google_data = yf.download("GOOGL", start = "2020-01-01", end = "2022-12-31")print(google_data)amazon_data = yf.download("AMZN", start= "2021-10-01", end = "2021-12-31")print(amazon_data)# Plot the daily closing prices :# Tesla Inc. (ticker: ”TSLA”) for the year 2020# Netflix (ticker: ”NFLX”) for the first half of 2022# Facebook (ticker: ”FB”) for the entire year of 2019tesla_data = yf.download("TSLA", start="2020-01-01", end="2021-01-01")tesla_data['Close'].plot(figsize=(10, 5))plt.title('Tesla Stock Closing Prices 2020')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()netflix_data = yf.download("NFLX", start = "2022-01-01", end ="2022-06-30")netflix_data['Close'].plot(figsize=(10, 5))plt.title('Netflix Stock Closing Prices for the First Half of 2022')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()facebook_data = yf.download("META", start = "2010-01-01", end = "2019-12-31")plt.figure(figsize=(10, 5))plt.plot(facebook_data['Close'], label="FB Closing Price", color="blue")plt.title('Facebook Stock Closing Prices for 2019')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()# Calculating moving averages :# a 30-day moving average on top of the daily closing prices of IBM (ticker: ”IBM”) for 2020# a 20-day moving average on the daily closing prices of Adobe Systems (ticker: ”ADBE”) for the year 2021# Nvidia Corporation (ticker: ”NVDA”) in 2022, visualize the daily closing prices along with its 40-day moving averageibm_data = yf.download("IBM", start="2020-01-01", end="2021-01-01")ibm_data['30-day MA'] = ibm_data['Close'].rolling(window=30).mean()ibm_data[['Close', '30-day MA']].plot(figsize=(10, 5))plt.title('IBM Stock Prices with 30-day Moving Average 2020')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()adobe_data = yf.download("ADBE", start = "2021-01-01", end = "2021-12-31")adobe_data['20-day MA'] = adobe_data['Close'].rolling(window=20).mean()adobe_data[['Close', '20-day MA']].plot(figsize=(10, 5))plt.title('Adobe Stock Prices with 20-day Moving Average 2021')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()nvda_data = yf.download("NVDA", start = "2022-01-01", end = "2022-12-31")nvda_data['40-day MA'] = nvda_data['Close'].rolling(window=40).mean()nvda_data[['Close', '40-day MA']].plot(figsize=(10, 5))plt.title('Nvidia Stock Prices with 40-day Moving Average 2022')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()# Resample the daily closing prices :# Starbucks Corp. (ticker: ”SBUX”) in 2020 to get monthly average closing prices.# Disney (ticker: ”DIS”) in 2019 to show bi-weekly (every two weeks) average closing prices# Coca-Cola Company (ticker: ”KO”) in 2020, how would you derive and plot the quarterly average closing pricessbux_data = yf.download("SBUX", start="2020-01-01", end="2021-01-01")monthly_data = sbux_data['Close'].resample('M').mean()monthly_data.plot(figsize=(10, 5))plt.title('Starbucks Monthly Average Closing Prices 2020')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()disney_data = yf.download("DIS", start = "2019-01-01", end = "2019-12-31")biweekly_data = disney_data['Close'].resample('2W').mean()biweekly_data.plot(figsize=(10, 5))plt.title('Disney biweekly Average Closing Prices 2019')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()coca_cola_data = yf.download("KO", start = "2020-01-01", end = "2020-12-31")quarterly_data = coca_cola_data['Close'].resample('Q').mean()quarterly_data.plot(figsize=(10, 5))plt.title('Coca Cola quarterly Average Closing Prices 202O')plt.ylabel('Price (in $)')plt.xlabel('Date')plt.show()